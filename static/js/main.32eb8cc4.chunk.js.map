{"version":3,"sources":["components/svg/logoAtb.svg","components/svg/num.svg","components/svg/recipeIcon.svg","components/svg/visa.svg","components/svg/visa2.svg","components/svg/master.svg","components/svg/maestro.svg","components/recipeComp/Header.js","redux/recipes/recipeActions.js","redux/recipes/recipeTypes.js","components/recipeComp/RecipeBody.js","components/Recipe.js","App.js","serviceWorker.js","redux/recipes/recipeReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","num","fetchRecipesRequest","type","connect","state","recipeData","recipe","dispatch","fetchRecipes","axios","get","then","res","recipes","data","payload","fetchRecipesSuccess","console","log","name","catch","err","errorMsg","message","useEffect","recipeIcon","loading","error","phone","email","username","id","visa2","master","maestro","visa","Recipe","App","Boolean","window","location","hostname","match","initialState","reducer","action","rootReducer","combineReducers","recipeReducer","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32eb8cc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoAtb.b1bfca5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/num.f6931727.svg\";","module.exports = __webpack_public_path__ + \"static/media/recipeIcon.4dabd9f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/visa.16ed809c.svg\";","module.exports = __webpack_public_path__ + \"static/media/visa2.d3ef3dc5.svg\";","module.exports = __webpack_public_path__ + \"static/media/master.cd93a85a.svg\";","module.exports = __webpack_public_path__ + \"static/media/maestro.99dc552e.svg\";","import React from 'react'\r\nimport logo from '../svg/logoAtb.svg'\r\nimport num from '../svg/num.svg'\r\nimport './header.css'\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\" >\r\n            <div className=\"logo\" >\r\n            <img src={logo} alt=\"\"/>\r\n            <img src={num} alt=\"\"/>\r\n            </div>\r\n            <p>ONLAYN ÖDƏNİŞ SƏHİFƏSİ</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import axios from 'axios';\r\nimport {\r\n    FETCH_RECIPE_FAILURE,\r\n    FETCH_RECIPE_SUCCESS,\r\n    FETCH_RECIPE_REQUEST\r\n} from './recipeTypes'\r\n\r\n\r\nexport const fetchRecipesRequest = () => {\r\n    return {\r\n        type: FETCH_RECIPE_REQUEST\r\n    }\r\n}\r\nexport const fetchRecipesSuccess = recipes=>{\r\n    return{\r\n        type: FETCH_RECIPE_SUCCESS,\r\n        payload:recipes\r\n    }\r\n\r\n}\r\n\r\nexport const  fetchRecipesFailure=error=>{\r\n    return {\r\n        type:FETCH_RECIPE_FAILURE,\r\n        payload:error\r\n    }\r\n}\r\n\r\nexport const fetchRecipes = ()=>{\r\n    return (dispatch)=>{\r\n        dispatch(fetchRecipesRequest)\r\n        axios.get('https://jsonplaceholder.typicode.com/users/1')\r\n        .then(res=>{\r\n            const recipes = res.data\r\n            dispatch(fetchRecipesSuccess(recipes))\r\n            console.log(recipes.name);\r\n            \r\n        })\r\n        .catch(err=>{\r\n            const errorMsg = err.message\r\n            dispatch(fetchRecipesFailure(errorMsg))\r\n        })\r\n    }\r\n}","export const FETCH_RECIPE_REQUEST = 'FETCH_RECIPE_REQUEST'\r\nexport const FETCH_RECIPE_SUCCESS = 'FETCH_RECIPE_SUCCESS'\r\nexport const FETCH_RECIPE_FAILURE = 'FETCH_RECIPE_FAILURE'\r\n","import React, { useEffect } from 'react'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { fetchRecipes } from '../../redux'\r\nimport recipeIcon from '../svg/recipeIcon.svg';\r\nimport visa from '../svg/visa.svg'\r\nimport visa2 from '../svg/visa2.svg'\r\nimport master from '../svg/master.svg'\r\nimport maestro from '../svg/maestro.svg'\r\nimport './RecipeBody.css'\r\n\r\nconst RecipeBody = ({ recipeData, fetchRecipes }) => {\r\n\r\n\r\n    useEffect(() => [\r\n        fetchRecipes()\r\n    ], [])\r\n    console.log(recipeData.recipes);\r\n    console.log(recipeData.recipes);\r\n    return (\r\n        <div className=\"recipeBody\">\r\n            <div className=\"recipeHeader\" >\r\n                <img src={recipeIcon} alt=\"\" />\r\n                <p>Qaimə</p>\r\n            </div>\r\n            {\r\n                fetchRecipes.loading ? (\r\n                    <h2>Loading...</h2>\r\n                ) : fetchRecipes.error ? (\r\n                    <h2>{recipeData.error}</h2>\r\n                ) : (\r\n                            <div>\r\n                                {\r\n                                    <div>\r\n                                        <div className=\"details\">\r\n                                            <p>Ödəyən</p>\r\n                                            <p>{recipeData.recipes.name}</p>\r\n                                        </div>\r\n                                        <div className=\"details\">\r\n                                            <p>Mobil nömrə</p>\r\n                                            <p>{recipeData.recipes.phone}</p>\r\n                                        </div>\r\n                                        <div className=\"line\">\r\n                                        </div>\r\n                                        <div className=\"details\">\r\n                                            <p>Kimə ödənilir</p>\r\n                                            <p>{recipeData.recipes.email}</p>\r\n                                        </div>\r\n                                        <div className=\"details\">\r\n                                            <p>Təyinat</p>\r\n                                            <p>{recipeData.recipes.username}</p>\r\n                                        </div>\r\n                                        <div className=\"price\">\r\n                                            <div className=\"details-amount\">\r\n                                                <p className=\"amount\">Məbləğ</p>\r\n                                                <p className=\"Amount-number\">{recipeData.recipes.id}  AZN</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        )\r\n            }\r\n\r\n            <div className=\"footer\">\r\n                <div className=\"footer-header\">\r\n                    <div className=\"shortline\"></div>\r\n                    <div className=\"pymttyp\" >ÖDƏNİŞ NÖVLƏRİ</div>\r\n                    <div className=\"shortline\" ></div>\r\n                </div>\r\n                <div className=\"carts\">\r\n                    <img src={visa2} alt=\"\" />\r\n                    <img src={master} alt=\"\" />\r\n                    <img src={maestro} alt=\"\" />\r\n                    <img src={visa} alt=\"\" />\r\n                </div>\r\n                <div className=\"warner-text\">\r\n                    <p>Ödə düyməsinə basaraq yuxarıda göstərilən məlumatlarla tanış olduğumu təsdiq edirəm</p>\r\n\r\n                </div>\r\n                <div className=\"submit\">\r\n                    <button>ÖDƏ</button>\r\n                </div>\r\n                <div className=\"line-2\">\r\n                </div>\r\n                <div className=\"footer-footer\">\r\n                    <p>© 2020 | Azər Türk Bank tərəfindən təmin edilən 3D-Secure ödəmə xidmətləri</p>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        recipeData: state.recipe\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchRecipes: () => dispatch(fetchRecipes())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeBody)\r\n","import React from 'react'\r\nimport './Recipe.css'\r\nimport Header from './recipeComp/Header'\r\nimport RecipeBody from './recipeComp/RecipeBody'\r\nconst Recipe = () => {\r\n    return (\r\n            <div className=\"table\">\r\n                <Header />\r\n                <RecipeBody className=\"recipeBody\" />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Recipe from './components/Recipe';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Recipe />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    FETCH_RECIPE_REQUEST,\r\n    FETCH_RECIPE_SUCCESS,\r\n    FETCH_RECIPE_FAILURE\r\n} from \"./recipeTypes\"\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    recipes: [],\r\n    error: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_RECIPE_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_RECIPE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                recipes: action.payload,\r\n                error: ''\r\n            }\r\n\r\n        case FETCH_RECIPE_FAILURE:\r\n            return {\r\n                loading: false,\r\n                recipes: [],\r\n                error: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer","import {combineReducers} from 'redux'\r\nimport recipeReducer from './recipes/recipeReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    recipe:recipeReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(logger,thunk)))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}